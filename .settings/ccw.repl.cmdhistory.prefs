#Thu Aug 14 13:12:09 CEST 2014
cmdhistory=["(make_matrices t h w 5 seqc)" "(vector seqc 5)" "(def seqc 0)" "(make_matrices t h w 5 seqc)" "(vector (vector 5) 4)" "(vector (vec 5) 4)" "(vec (vector 5) 4)" "(conj (vector 5) 4)" "(make_matrices t h w 5 seqc)" "(mak 4)" "(mak 2)" "(mak 49)" "(make_matrices t h w 5 seqc)" "(make_matrices t h w 5)" "(make_matrices t h w 1)" "(defcost t (mmult h w))" "(make_matrices t h w 2)" "(make_matrices t h w 3)" "(def h (matrix [[9]]))" "(make_matrices t h w 2)" "(make_matrices t h w 1)" "(make_matrices t h w 3)" "(make_matrices t h w 4)" "(make_matrices t h w 3)" "(make_matrices t h w 35)" "(def h (matrix [[2]]))" "get" "h" "w" "t" "(make_matrices t h w 1)" "(make_matrices t h w 2)" "(make_matrices t h w 1)" "(def h1 (matrix [[1.67]]))" "(def w1 (matrix [[2.5]]))" "(make_matrices t h1 w1 1)" "(def h (matrix [[16.8\\n                 ]]))" "h" "(def w (matrix [[8.5\\n                 ]]))" "(def t (matrix [[50\\n                 ]]))" "(make_matrices t h w 1)" "(make_matrices t h w 2)" "(make_matrices t (matrix([[5.88]]))\\n               (matrix([[2.98]])) 1)" "(make_matrices t (matrix[[5.88]])\\n               (matrix[[2.98]]) 1)" "(def A (matrix [[2 4][1 7]]))" "A" "(def B (matrix [[3 2][7 9]]))" "B" "(def D (matrix [[16 13][27 18]]))" "D" "(make_matrices D A B 1)" "(make_matrices D A B 2)" "(make_matrices D A B 3)" "(make_matrices D A B 4)" "D" "(trans D)" "D" "A" "(mult A D)" "(mult D A)" "(div A D)" "D" "A" "(div D A)" "(mmult A D)" "(make_matrices D A B 3)" "(make_matrices D A B 37)" "(make_matrices D A B 3783)" "A" "B" "D" "(make_matrices D A B 3783)" "(+ 5 5)" "(def V (matrix [[55 77 21] [11 29 48] [89 93 32]]))" "V" "(launch V 2 10)" "(launch V 2 105)" "(def V (matrix \\n         [[5 7 1] [1 2 4]]))" "(def V (matrix [[55 77 21] [11 29 48] [89 93 32]]))" "(def H (matrix \\n         [[5 7 1] [1 2 4]]))" "H" "(def W (matrix \\n         [[5 3] [2 8] [9 2]]))" "(make_matrices V H W 10)" "(mmult H W)" "(mmult W H)" "(make_matrices V W H 10)" "(make_matrices V H W 10)" "(defcost W H)" "(defcost V (mmult W H))" "(launch V 2 20)" "(launch V 2 200)" "(launch V 2 201)" "(launch V 2 2011)" "(launch V 2 20113)" "(make_random_matrix 3 3)" "(def W (matrix \\n         [[5544 3554 3987] [2778 8752 6547] [9554 5646 1122]]))" "(launch W 2 20113)" "(launch W 2 201)" "(launch W 2 21)" "(launch W 2 2111)" "(launch W 2 210)" "(def W (matrix \\n         [[55844 35754 38987]\\n          [27798 87852 65477] \\n          [95754 56946 11272]]))" "(launch W 2 210)" "(launch W 2 211)" "(launch W 2 210)" "(launch W 2 21)" "(+ 5 6)" "(def W (make_random_matrix 7 8 20\\n                           ))" "W" "(launch W 2 100)" "(launch W 2 101)" "(launch W 2 1000)" "(launch W 3 100)" "(launch W 4 100)" "(launch W 5 100)" "(def W (make_random_matrix 15 18 214\\n                           ))" "W" "(launch W 3 100)" "(launch W 3 101)" "(launch W 8 100)" "(def W (make_random_matrix 15 18 2\\n                           ))" "W" "(launch W 3 100)" "(launch W 3 1000)" "(launch W 9 1000)" "(launch W 9 1001)" "(def m1 (matrix [[1 2 3][4 5 6]]))" "(def m2 (matrix [[1 2][3 4][5 6]]))" "(launch (mmult) 3 100)" "(launch (mmult m1 m2) 3 100)" "(launch2 (mmult m1 m2) 3 100)" "m1" "m2" "(mmult m1 m2)" "(launch2 (mmult m1 m2) 3 100)" "V" "m1" "(+ 3 4)" "(def V (make_random_matrix 6 5 2399))" "V" "(launch V 3 100)" "(launch V 3 101)" "(launch V 3 1011)" "(launch2\\n  V 3 1011)" "m1" "(def m1 (matrix [[1 2 3][4 5 6]]))" "(def m2 (matrix [[1 2][3 4][5 6]]))" "(launch2 (mmult m1 m2) 3 100)" "(def x (launch2 (mmult m1 m2) 3 100))" "(mmult (first x)(second x))" "(mmult m1 m2)" "(mmult m2 m1)" "(def x (launch2 (mmult m2 m1) 3 100))" "(mmult (first x)(second x))" "(def x (launch (mmult m2 m1) 3 100))" "x" "m1" "m2" "(mmult m1 m2)" "(def x (launch (mmult m1 m2) 3 100))" "(mmult (first x) (second x))" "(first x)" "(second x)" "V" "(launch2 V 3 100)" "(max V)" "(/ (sum V) (* (nrow V)(ncol V))" "(/ (sum V) (* (nrow V)(ncol V)))" "(sum V)" "(/ (map sum V) (* (nrow V)(ncol V)))" " (sum (map sum  (minus A B) ))" " (sum (map sum  V ))" " (/(sum (map sum  V )) (*(nrow V)(ncol V)))" "(avg V)" "(avg m1)" "(avg V)" "(avg m1)" "(make_random_matrix 3 3 0.334)" "(launch V 3 10)" "(launch_opt V 3 10)" "(launch V 3 10)" "(launch_opt V 3 10)" "(launch V 3 100)" "(launch_opt V 3 100)" "(launch_opt V 2 100)" "(launch_opt V 4 100)" "(launch_opt V 5 100)" "(launch V 5 100)" "V" "(avg V)" "(opt_max V)" "(launch V 5 100)" "(launch_opt V 5 100)" "(launch V 5 100)" "(launch V 2 100)" "(launch V 5\\n        100)" "(launch V 5\\n        1000)" "(copy \\"http\://upload.wikimedia.org/wikipedia/commons/thumb/e/ee/RSD-10_2009_G1.jpg/300px-RSD-10_2009_G1.jpg\\"\\n      \\"slika.jpg\\")" "(copy \\"http\://upload.wikimedia.org/wikipedia/commons/thumb/e/ee/RSD-10_2009_G1.jpg/300px-RSD-10_2009_G1.jpg\\"\\n      \\"data/slika.jpg\\")" "(make_uri \\"GOOG\\" 19 3 2001 3 11 2014 w)" "(make_uri \\"GOOG\\" 19 3 2001 3 11 2014 \\"w\\")" "(make_uri \\"WU\\" 19 3 2001 3 11 2012 \\"w\\")" "(copy \\n  \\"http\://ichart.yahoo.com/table.csv?s\=WU&a\=2&b\=19&c\=2001&d\=10&e\=3&f\=2012&g\=w&ignore\=.csv\\"\\n  \\"data.csv\\")" "(parse \\"table.csv\\")" "(def a (parse \\"table.csv\\"))" "(first a)" "(second a)" "(seq (second a))" "(printall (second a))" "(print (second a))" "(printall (second a))" "(def data_m (second a))" "(vals data_m)" "data_m" "(def data_m (seq (second a)))" "(vals data_m)" "(first data_m)" "(second data_m)" "(def dat (second data_m))" "dat" "(first dat)" "(vals dat)" "(vals (seq dat))" "(get (first dat) \:Close)" "a" "(get_data a)" "(extract dat \\"Close\\"\\n         )" "(extract dat \:Close    )" "(extract dat \\"Close\\"\\n         )" "(extract dat \:Close)" "(printall (extract dat \:Close))" "(def a (get_data (parse \\"table.csv\\")))" "a" "(first a)" "(extract_one (first a) \:Close)" "(extract_one (first a) \:Close \:Volume)" "(extract_one (first a) \:Close)" "(extract_one (first a) \:Close \:Volume)" "(extract_one (first a) \:Volume)" "(extract_one (first a) \:Volume \:Close)" "(extract_one (first a) \:Volume)" "(extract_one (first a) \:Volume \:Close)" "(extract_one (first a) \:Volume \:Close \:Date)" "(extract dat \:Close)" "dat" "(def dat (second data_m))" "a" "(def data_m (seq (second a)))" "(def dat (second data_m))" "(extract dat \:Close)" "dat" "(extract data_m \:Close)" "(printall data_m)" "(printall a)" "(extract a \:Close)" "(extract_one (first a) \:Volume \:Close)" "(extract a \:Close)" "(extract a \:Close \:Volume)" "(extract_one (first a) \:Volume \:Close)" "(extract_one (first a) \:Volume\\n             )" "(extract a \:Close)" "(extract a \:Close \:Volume)" "(first a)" "(extract a \:Close \:Volume)" "(extract a \:Close)" "(extract_one (first data) \:Close (seq [\:Volume]))" "(extract_one (first a) \:Close (seq [\:Volume]))" "(extract_one (first a) \:Close \:Volume)" "(extract a \:Close)" "(extract a \:Close \:Volume)" "(extract_one (first a) \:Close \:Volume)" "(extract a \:Close \:Volume)" "a" "(extract a \:Close \:Volume)" "(extract a \:Close)" "(extract a \:Close \:Volume)" "(extract_one (first a) \:Close \:Volume)" "(extract_one (first a) [\:Close \:Volume])" "(extract a \:Close \:Volume)" "(extract a \:Close)" "a" "(extract a \:Close \:Volume)" "(make_uri \\"AAPL\\" 10 9 2008 23 3 2010 d)" "(make_uri \\"AAPL\\" 10 9 2008 23 3 2010 \\"d\\")" "(copy (make_uri \\"AAPL\\" 10 9 2008 23 3 2010 \\"d\\") \\"data/AAPL.csv\\")" "(copy (make_uri \\"YHOO\\" 10 9 2008 23 3 2010 \\"d\\") \\"data/AAPL.csv\\")" "(fetch_data companies 10 9 2008 23 3 2010 \\"d\\")" "(parse \\"table.csv\\")" "(def a (get_data (parse \\"table.csv\\")))" "a" "(extract a \:Close)" "(extract a \:Close \:Volume\\n         )" "(ff a \:Close \:Volume)" "(def b (get_data (parse \\"data.csv\\")))" "(extract_all [a b] \:Close)" "(extract_all [a b] \:Close \:Values)" "(e a \:Close)" "(e a \:Close \:Values\\n   )" "ff" "print ff" "(\:source ff)" "(\:source (meta \#'ff))" "(ns myns\\r\\n    (\:use [clojure.repl \:only (source)]))" "(source ff)" "(source e)" "(source prn)" "(source ff)" "(ff a \:Close \:Volume)" "ff" "(e a \:Close \:Volume)" "(ns Berza.file-parse)" "(e a \:Close \:Volume)" "(extract_all [a b] \:Close)" "(extract_all [a b] \:Close \:Volume)" "(def a (get_data (parse \\"table.csv\\")))" "a" "(re-matches \#\\"[A-Z] \\" \\"AAAPL.csv\\")" "(re-matches \#\\"[A-Z]\\" \\"AAAPL.csv\\")" "(re-matches \#\\"A-Z\\" \\"AAAPL.csv\\")" "(re-matches \#\\"[A-Z]*\\" \\"AAAPL.csv\\")" "(re-matches \#\\"[A-Z]*$\\" \\"AAAPL.csv\\")" "(re-matches \#\\"^[A-Z]*\\" \\"AAAPL.csv\\")" "(subs (first \\".\\") \\"AA.c\\")" "(re-find \#\\"[A-Z]*\\" \\"AAAPL.csv\\")" "(data_from_file \\"table.csv\\")" "(keys (data_from_file \\"table.csv\\"))" "(first (keys (data_from_file \\"table.csv\\")))" "(def a (data_from_file \\"table.csv\\"))" "a" "(def b (data_from_file \\"data.csv\\"))" "b" "(extract_all [a b])" "(extract_all [a b] \:Close)" "(def dat1 {\:id1 '('('(2)'(21)'(32)'(22)'(12)))})" "dat1" "(def dat1 {\:id1 (((2)(21)(32)(22)(12)))})" "'(2 3)" "'(3)" "(def dat1 {\:id1 '(2)'(21)'(32)'(22)'(12)})" "dat1" "(def dat1 {\:id1 '('(2)'(21)'(32)'(22)'(12))})" "dat1" "(def dat1 {\:id1 ('(2)'(21)'(32)'(22)'(12))})" "(def dat1 {\:id1 (cons 2 22 12 21)})" "(def dat1 {\:id1 (cons '(2 22 12)\\n                      21)})" "(def dat1 {\:id1 (cons 2 '(22 12 21))})" "dat1" "(def dat1 {\:id1 (cons  nil (cons 2 '(22 12 21)))})" "dat1" "(def dat1 {\:id1 (cons (cons 2 '(22 12 21)))})" "a" "(extract a \:Close)" "(extract (second a) \:Close)" "(extract (get a \:table) \:Close)" "(extract_all [a b] \:Close)" "dat1" "(def dat1 {\:id1 (cons 2 '(22 12 21))})" "dat1" "(extract_one (second (get a \:table)) [\:Close])" "(get (second (get a \:table) \:Close)" "(get (second (get a \:table) \:Close))" "(get (second (get a \:table)) \:Close)" "(extract_one (second (get a \:table)) [\:Close])" "(def dat1 {\:id1 (seq 2)})" "(def dat1 {\:id1 (seq 2 3)})" "(def dat1 {\:id1 (seq [2])})" "dat1" "(def dat1 {\:id1 (seq(seq [2]))})" "dat1" "(def dat1 {\:id1 (seq(seq [2]) (seq [3]) (seq [4]))})" "(data_from_file \\"test1.csv\\")" "(def test1 (data_from_file \\"test1.csv\\"))" "(def test2 (data_from_file \\"test2.csv\\"))" "test2" "(extract_all [test1 test2] \:Close)" "(defn datas ((extract_all [test1 test2] \:Close))\\n  )" "(defn datas (extract_all [test1 test2] \:Close))" "(extract_all [test1 test2] \:Close)" "(defn datas(extract_all [test1 test2] \:Close))" "(def datas (extract_all [test1 test2] \:Close))" "datas" "(vals datas)" "(vals (seq datas))" "(vals (get datas \:test))" "(def datas (extract_all [test1 test2] \:Close))" "datas" "(def datas (extract_all [test1 test2] \:Close))" "datas" "(re-find \#\\"[A-Za-z0-9]*\\" \\"text1.c\\")" "(def datas (extract_all [test1 test2] \:Close))" "(def test1 (data_from_file \\"test1.csv\\"))" "(def test2 (data_from_file \\"test2.csv\\"))" "(def datas (extract_all [test1 test2] \:Close))" "datas" "(first datas)" "(vals (first datas))" "(first (vals (first datas)))" "(get_values_from_map (first datas))" "(first (vals (first datas)))" "(get_values_from_map (first datas))" "(get_values_from_map (second datas))" "(cons_in_list 3 2)" "(cons_in_list 3 2 34)" "(defn dd [& args] (list args))" "(dd 3 5 6)" "(cons_in_list 3 4 5 6)" "(testmatrix datas)" "datas" "(get_vals datas)" "(first datas)" "(get_vals datas)" "(testmatrix (get_vals datas))" "(testmatrix (first (get_vals datas)))" "(testmatrix (first (get_vals datas))(second (get_vals datas)))" "(testmatrix (vals (get_vals datas)))" "(testmatrix (apply (get_vals datas)))" "(testmatrix (interleave (get_vals datas)))" "(apply (testmatrix  (get_vals datas)))" "(apply testmatrix  (get_vals datas))" "(apply (testmatrix  (get_vals datas) (get_vals datas)" "(apply (testmatrix  (get_vals datas) (get_vals datas)))" "(apply (testmatrix  (get_vals datas)) (get_vals datas))" "(testmatrix  (get_vals datas))" "(mapcat (get_vals datas))" "(testmatrix  (get_vals datas))" "(get_vals datas)" "(testmatrix  (mapcatList (get_vals datas)))" "(testmatrix  (get_vals datas))" "(def test2 (data_from_file \\"test2.csv\\"))" "(data_from_file \\"data.csv\\")" "(data_from_file \\"test1\\n.csv\\")" "(data_from_file \\"test1.csv\\")" "(def a (data_from_file \\"test1.csv\\"))" "a" "(extract_one a \:Close)" "(extract_one a (\:Close)\\n             )" "(extract_one a [\:Close])" "(extract_one (first a) [\:Close])" "(extract_one (second a) [\:Close])" "(extract_one (first(second a)) [\:Close])" "(second a)" "a" "(extract_one (get a \:test1) [\:Close])" "(get a \:test1)" "(extract_one (first (get a \:test1)) [\:Close])" "(extract a)" "(extract a \:Close)" "(extract (get a \:test1) \:Close)" "(extract (get a \:test1) \:Close \:Volume)" "(def test1 (data_from_file \\"test1.csv\\"))" "(def test2 (data_from_file \\"test2.csv\\"))" "(extract_all [test1 test2] \:Close)" "(args_to_list 4 4 444 3)" "(def a (read_data \\"test1.csv\\"))" "a" "(extract_all \:Close)" "(extract_all a \\n             \:Close)" "(get_values_from_map a)" "(extract_all [a] \\n             \:Close)" "(def b (read_data \\"test2.csv\\"))" "(extract_all [a b] \\n             \:Close)" "(get_values_from_map (extract_all [a b] \:Close))" "(get_vals (extract_all [a b] \:Close))" "(def dd (get_vals (extract_all [a b] \:Close)))" "dd" "(testmatrix dd)" "(mapcatList dd)" "(extract a \:Close)" "(extract (get a (first (keys a)) ) \:Close)" "(extract2 (get a (first (keys a)) ) \:Close)" "(extract_one (first (get a (first (keys a))) ) \:Close)" "a" "(first (get a (first (keys a))) )" "(extract_one (first (get a (first (keys a))) )[\:Close])" "(extract_one2 (first (get a (first (keys a))) )[\:Close])" "(extract_one2 (first (get a (first (keys a))) ) \:Close)" "(extract2 (get a (first (keys a)) ) \:Close)" "(extract_all2 [a b] \\n             \:Close)" "(testmatrix (extract_all2 [a b] \\r\\n                \:Close))" "(testmatrix (get_vals(extract_all2 [a b] \\r\\n                \:Close)))" "(get_values_from_map2  (extract_all2 [a b] \\r\\n                \:Close))" "(get_vals2  (extract_all2 [a b] \\r\\n                \:Close))" "(nmf_matrix_data (get_vals2  (extract_all2 [a b] \\r\\n                   \:Close)))" "(nmf_matrix_data (get_vals2  (extract_all2 [a b a] \\r\\n                   \:Close)))" "(read-html)" "(add-css)" "(read-html)" "(add-css)" "(first (read-html))" "(second (first (read-html)))" "(second (second (first (read-html))))" "(third\\n  (second (first (read-html))))" "(nth\\n  (second (first (read-html))) 3)" "4" "(nth\\n  (second (first (read-html))) 4)" "(second (first (read-html)))" "(conj (second (first (read-html))) 5 6)" "(defn replacc\\n  []\\n  (let[vec \\n       (conj (second (first (read-html))) (page/include-css \\"http\://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\\")\\r\\n   (page/include-css \\"css/custom.css\\"))]\\n    (replace vec [0 1 2 3 6 7])\\n    )\\n  )" "(replacc)" "( apply page/include-css \\n  \\"http\://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\\")" "( apply (page/include-css \\n  \\"http\://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\\"))" "( apply page/include-css \\n  \\"http\://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\\")" "( apply page/include-css \\n  (page/include-css\\"http\://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\\"))" "( apply page/include-css \\n  (page/include-css \\"http\://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\\"))" "\\n  (page/include-css \\n    \\"http\://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\\")" "\\n  (apply (page/include-css \\n           \\"http\://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\\") str)" "\\n  (apply str (page/include-css \\n               \\"http\://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\\"))" "\\n  (apply vec (page/include-css \\n               \\"http\://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\\"))" "(defn replacc\\n  []\\n  (let[vec \\n       (conj (second (first (read-html))) \\n             (apply vec (page/include-css \\"http\://maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\\"))\\r\\n   (apply vec (page/include-css \\"css/custom.css\\")))]\\n    (replace vec [0 1 2 3 6 7])\\n    )\\n  )" "(replacc)" "(replacc \\"resources/views/new.html\\")" "(replacc (read-html \\"resources/views/new.html\\"))" "(first (read-html))" "(first (read-html \\"resources/views/new.html\\"))" "(read-html \\"resources/views/new.html\\")" "(nth (read-html \\"resources/views/new.html\\") 0\\n     )" "(nth (read-html \\"resources/views/new.html\\") 1\\n     )" "(first (nth (read-html \\"resources/views/new.html\\")) 0)" "(first \\n  (nth (read-html \\"resources/views/new.html\\") 0))" "(first (read-html \\"resources/views/new.html\\"))" "(nth (first (read-html \\"resources/views/new.html\\")) 0)" "(nth (first (read-html \\"resources/views/new.html\\")) 1\\n     )" "(nth (first \\n       (read-html \\"resources/views/new.html\\")) 2)" "(nth (first \\n       (read-html \\"resources/views/new.html\\")) 3\\n     )" "(parse-html \\"resources/views/new.html\\")" "(input-form)" "(def params {\:endDay \\"19\\", \:GOOG \\"GOOG\\", \:interval \\"w\\", \:MICS \\"MICS\\", \:startDay \\"4\\", \:startMonth \\"10\\", \:startYear \\"2007\\", \:endMonth \\"1\\", \:AAPL \\"AAPL\\", \:endYear \\"2010\\"})" "params" "(count \\"DD)" "(count \\"DD\\"\\n       )" "(map (or (not number?) (< count 1)) (vals params))" "(defn check \\n  [c]\\n  (or (not number?) (< (count c) 2)))" "(check 2)" "(map (or (not number?)  (vals params)))" "(map (or (not number?))  (vals params))" "(map  (not number?)  (vals params))" "(map number?  (vals params))" "(vals params)" "(remove number? (vals params))" "(defn predicate\\n  [str]\\n  (let [char (first str)]\\n    (or (number? char) (\= char (clojure.string/lower-case char)))\\n    ))" "(predicate 3)" "(predicate \\"dsf\\"\\n           )" "(predicate \\"Dsf\\"\\n           )" "(predicate \\"5\\"\\n           )" "(clojure.string/lower-case \\"W\\")" "(first \\"DF\\")" "(clojure.string/lower-case \\\\W)" "(defn predicate\\n  [str]\\n  (let [char (first str)]\\n    (prn char)\\n    (or (number? char) (\= char (clojure.string/lower-case char)))\\n    ))" "(predicate \\"Dsf\\"\\n           )" "(\= /D (clojure.string/lower-case /D)" "(defn predicate\\n  [elem]\\n  (let [char (str(first elem))]\\n    (prn char)\\n    (or (number? char) (\= char (clojure.string/lower-case char)))\\n    ))" "(predicate \\"Dsf\\"\\n           )" "(number? \\"D\\")" "(number? \\"d\\")" "(number? \\"43\\")" "(predicate \\"d\\n\\n\\n\\"\\n           )" "(predicate \\"5\\")" "(remove predicate (vals params))" "(map predicate (vals params))" "(defn predicate\\r\\n     [str]\\r\\n     \\"Predicate function for separation of companies.\\"\\r\\n     (let [char (first str)]\\r\\n       (or (number? char) (\= char (clojure.string/lower-case char)))))" "(map predicate (vals params))" "(remove predicate (vals params))" "(vals params)" "(predicate \\"19\\")" "(defn predicate\\r\\n     [str]\\r\\n     \\"Predicate function for separation of companies.\\"\\r\\n     (let [char (first str)]\\r\\n       (or (number? char) (\= char (clojure.string/lower-case char)))))" "(predicate \\"19\\")" "(predicate \\"d\\")" "(predicate \\"DDD\\")" "(defn predicate\\r\\n     [str]\\r\\n     \\"Predicate function for separation of companies.\\"\\r\\n     (let [char (str(first str))]\\r\\n       (or (number? char) (\= char (clojure.string/lower-case char)))))" "(predicate \\"DDD\\")" "(defn predicate\\r\\n     [str]\\r\\n     \\"Predicate function for separation of companies.\\"\\r\\n     (let [char (str (first str))]\\r\\n       (or (number? char) (\= char (clojure.string/lower-case char)))))" "(predicate \\"DDD\\")" "(defn predicate\\r\\n     [elem]\\r\\n     \\"Predicate function for separation of companies.\\"\\r\\n     (let [char (str (first elem))]\\r\\n       (or (number? char) (\= char (clojure.string/lower-case char)))))" "(predicate \\"DDD\\")" "(predicate \\"d\\")" "(predicate \\"2\\")" "(remove predicate (vals params))" "(defn get-companies\\r\\n  [subtmited-data]\\r\\n  \\"Separates companies from submited data\\"\\r\\n  (remove predicate (vals subtmited-data)))" "(get-companies params)" "(read_data \\"data/AAPL.csv\\")" "(def datas (read_data \\"data/AAPL.csv\\"))" "(extract2 datas \:Close)" "(extract_all2 datas \:Close)" "datas" "(def data1 (read_data \\"test1.csv\\"))" "data1" "(extract2 (second2 data1))" "(extract2 (second data1))" "(extract2 (second data1) \:Close)" "(second data1)" "data1" "(extract2 (get data1 \:test1) \:Close)" "(extract_all2 [data1] \:Close)" "(def data2 (read_data \\"test2.csv\\"))" "(extract_all2 [data1 data2] \:Close)" "(extract_all2 [data1 data2] \:Close \:Volume)" "(extract_all2 [data1 data2] \:Close)" "(get_vals2 test1)" "(get_vals2 data1)" "data1" "(get_vals2 (get data1 \:test1))" "(get_vals2 (get [data1 data2] \:test1))" "(get_vals2 [data1 data2])" "(get_vals2 (extract_all2 [data1 data2] \:Close))" "(nmf_matrix_data (get_vals2 (extract_all2 [data1 data2] \:Close)))" "(def aa (read_multiple_data companies))" "(str \\"data/\\" \\"dd\\")" "(def aa (read_multiple_data companies))" "(first companies)" "(def aa (read_multiple_data companies))" "companies" "(def aa (read_multiple_data companies))" "aa" "(printall companies)" "(defn read_multiple_data\\r\\n  [& companies]\\r\\n  (loop [datasets []\\r\\n        comp companies]\\r\\n       (cond (empty? (rest comp))\\r\\n             (prn (str \\"data/\\" (first comp) \\".csv\\") )\\r\\n             \:else\\r\\n             (recur datasets (rest comp)\\n               ))))" "(def aa (read_multiple_data companies))" "aa" "(def aa (read_multiple_data companies))" "(read_multiple_data [\\"AAPL\\"])" "(first [\\"AA\\"])" "(read_multiple_data companies)" "(def ad (read_multiple_data companies))" "(first ad)" "(second ad)" "(extract_all2 ad)" "(extract_all2 ad \:Close\\n              )" "(nmf_matrix_data (get_vals2 (extract_all2 ad \:Close)))" "(make_nmf companies \:Volume)" "(def params {\:endDay \\"12\\", \:GOOG \\"GOOG\\", \:interval \\"w\\", \:MICS \\"MICS\\", \:startDay \\"20\\", \:startMonth \\"10\\", \:startYear \\"2010\\", \:endMonth \\"9\\", \:endYear \\"2013\\"})" "(get-companies params)" "bd" "nmf" "*e" "(+ 6 6)" "(def params {\:endDay \\"12\\", \:WU \\"WU\\", \:interval \\"w\\", \:AAPL \\"AAPL\\n\\", \:startDay \\"20\\", \:startMonth \\"10\\", \:startYear \\"2010\\", \:endMonth \\"9\\", \:endYear \\"2013\\"})" "(def params {\:endDay \\"12\\", \:WU \\"WU\\", \:interval \\"w\\", \:AAPL \\"AAPL\\n, \:startDay \\"20\\", \:startMonth \\"10\\", \:startYear \\"2010\\", \:endMonth \\"9\\", \:endYear \\"2013\\"})" "(def params {\:endDay \\"12\\", \:WU \\"WU\\", \:interval \\"w\\", \:AAPL \\"AAPL\\", \:startDay \\"20\\", \:startMonth \\"10\\", \:startYear \\"2010\\", \:endMonth \\"9\\", \:endYear \\"2013\\"})" "(download_data params)" "*e" "(get-companies params)" "(download_data params)" "(get params \:startDay)" "(download_data params)" "(vec(get-companies params))" "(download_data params)" "(par/make_nmf [\\"AAPL\\" \\"WU\\"] \:Close)" "(def l_set '('(10 15)'(3 7)'(9 11)))" "l_set" "(def l_set '((10 15)(3 7)(9 11)))" "l_set" "(incanter/matrix l_set)" "(def matr (incanter/matrix l_set))" "matr" "(alg/nmf matr 2 100)" "(perform_nmf params)" "*1" "(def result *1)" "result" "(par/extract2 (read_data \\n                (str \\"data/\\" (first companies) \\".csv\\")) \:Date)" "(read_data \\r\\n                   (str \\"data/\\" (first companies) \\".csv\\"))" "(par/extract2 (read_data \\n                (get (str \\"data/\\" (first companies) \\".csv\\") \:data)) \:Date)" "(par/extract2 (get (read_data \\n                (str \\"data/\\" (first companies) \\".csv\\")) \:data) \:Date)" "(par/extract2 (vals (read_data \\n                (str \\"data/\\" (first companies) \\".csv\\"))) \:Date)" "(vals (read_data \\r\\n                (str \\"data/\\" (first companies) \\".csv\\")))" "(par/extract2 (apply {} (vals (read_data \\n                          (str \\"data/\\" (first companies) \\".csv\\"))) \:Date))" "(par/extract2 (apply seq (vals (read_data \\n                           (str \\"data/\\" (first companies) \\".csv\\"))) \:Date))" "(par/extract2 (first (vals (read_data \\n                       (str \\"data/\\" (first companies) \\".csv\\")))) \:Date)" "(printall *1)" "(first result)" "(second result)" "(nth result 2)" "(nth result 3\\n     )" "result" "(replace-css \\"resources/views/new.html\\")" "(def htmlfile (read-html \\"resources/views/new.html\\"))" "htmlfile" "(first htmlfile)" "(nth (first htmlfile) 3)" "(nth (first htmlfile) 2)" "(conj \\n  (nth (first htmlfile) 3) (page/include-js js/bootstrap.min.js))" "(conj \\n  (nth (first htmlfile) 3) (page/include-js \\"js/bootstrap.min.js\\"))" "(page/include-js \\"js/bootstrap.min.js\\")" "(parse-html \\"resources/views/new.html\\")" "(conj \\n  (nth (first htmlfile) 3) (page/include-js \\"js/bootstrap.min.js\\"))" "(nth (first htmlfile) 2)" "(conj \\n  (nth (first htmlfile) 2) (page/include-js \\"js/bootstrap.min.js\\"))" "(conj \\n  (nth (first htmlfile) 2) (apply vec (page/include-js \\"js/bootstrap.min.js\\")))" "(insert-jss \\n  [\\"js/bootstrap.min.js\\" \\"js/jquery.js\\" \\"js/custom.js\\"])" "(insert-jss \\"resources/views/new.html\\"\\n  [\\"js/bootstrap.min.js\\" \\"js/jquery.js\\" \\"js/custom.js\\"])" "(insert-jss (read-html \\"resources/views/new.html\\")\\n  [\\"js/bootstrap.min.js\\" \\"js/jquery.js\\" \\"js/custom.js\\"])" "(map page/include-js \\n    \\r\\n     [\\"js/bootstrap.min.js\\" \\"js/jquery.js\\" \\"js/custom.js\\"])" "(map (apply vec page/include-js \\n    \\r\\n     [\\"js/bootstrap.min.js\\" \\"js/jquery.js\\" \\"js/custom.js\\"]))" "(map (apply vec page/include-js )\\n    \\r\\n     [\\"js/bootstrap.min.js\\" \\"js/jquery.js\\" \\"js/custom.js\\"])" "(defn retvec\\n  [param]\\n  (apply vec (page/include-js param)))" "(retvec \\"js/jdd.js\\")" "(map retvec\\n    \\r\\n     [\\"js/bootstrap.min.js\\" \\"js/jquery.js\\" \\"js/custom.js\\"])" "(map (apply vec (page/include-js \\n    \\r\\n     [\\"js/bootstrap.min.js\\" \\"js/jquery.js\\" \\"js/custom.js\\"]))" "(map (apply vec (page/include-js \\n    \\r\\n     [\\"js/bootstrap.min.js\\" \\"js/jquery.js\\" \\"js/custom.js\\"])))" "(insert-jss (read-html \\"resources/views/new.html\\")\\n  [\\"js/bootstrap.min.js\\" \\"js/jquery.js\\" \\"js/custom.js\\"])" "(apply vec (page/include-js \\"dsf/df.js\\"))" "(insert-jss (read-html \\"resources/views/new.html\\")\\n  [\\"js/bootstrap.min.js\\" \\"js/jquery.js\\" \\"js/custom.js\\"])" "(map (fn  [param]\\r\\n                          (apply vec (page/include-js param))) [\\"sdf.js\\" \\"ds.js\\"])" "(apply vec (map (fn  [param]\\r\\n   (apply vec (page/include-js param))) [\\"sdf.js\\" \\"ds.js\\"]))" "( vec (map (fn  [param]\\r\\n   (apply vec (page/include-js param))) [\\"sdf.js\\" \\"ds.js\\"]))" "( peek (map (fn  [param]\\r\\n   (apply vec (page/include-js param))) [\\"sdf.js\\" \\"ds.js\\"]))" "( pop (map (fn  [param]\\r\\n   (apply vec (page/include-js param))) [\\"sdf.js\\" \\"ds.js\\"]))" "( seq (map (fn  [param]\\r\\n   (apply vec (page/include-js param))) [\\"sdf.js\\" \\"ds.js\\"]))" "(insert-jss (read-html \\"resources/views/new.html\\")\\n  [\\"js/bootstrap.min.js\\" \\"js/jquery.js\\" \\"js/custom.js\\"])" "(input-form)" "(parse-html(insert-jss (read-html \\"resources/views/new.html\\") [\\"js/bootstrap.min.js\\" \\"js/jquery.js\\" \\"js/custom.js\\"])" "(parse-html\\n  (insert-jss \\n    (read-html \\"resources/views/new.html\\") \\n    [\\"js/bootstrap.min.js\\" \\"js/jquery.js\\" \\"js/custom.js\\"]))" "\\n  (insert-jss \\n    (read-html \\"resources/views/new.html\\") \\n    [\\"js/bootstrap.min.js\\" \\"js/jquery.js\\" \\"js/custom.js\\"])" "\\n (html (insert-jss \\n         (read-html \\"resources/views/new.html\\") \\n         [\\"js/bootstrap.min.js\\" \\"js/jquery.js\\" \\"js/custom.js\\"]))" "\\n  (insert-jss \\n    (read-html \\"resources/views/new.html\\") \\n    [\\"js/bootstrap.min.js\\" \\"js/jquery.js\\" \\"js/custom.js\\"])" "(map (fn  [param]\\r\\n   (apply vec (page/include-js param))) [\\"sdf.js\\" \\"ds.js\\"]))" "(map (fn  [param]\\r\\n   (apply vec (page/include-js param))) [\\"sdf.js\\" \\"ds.js\\"])" "(vec (fn  [param]\\r\\n   (apply vec (page/include-js param))) [\\"sdf.js\\" \\"ds.js\\"])" "(vec (map (fn  [param]\\r\\n   (apply vec (page/include-js param))) [\\"sdf.js\\" \\"ds.js\\"]))" "(def ad (vec (map (fn  [param]\\r\\n   (apply vec (page/include-js param))) [\\"sdf.js\\" \\"ds.js\\"])))" "(peek ad \\"dd\\")" "(vec (conj (map (fn  [param]\\r\\n   (apply vec (page/include-js param))) [\\"sdf.js\\" \\"ds.js\\"]) \:div))" "\\n  (insert-jss \\n    (read-html \\"resources/views/new.html\\") \\n    [\\"js/bootstrap.min.js\\" \\"js/jquery.js\\" \\"js/custom.js\\"])" "(input-form)" "(parse-html \\"resources/views/new.html\\")" "(def ddd (parse-html \\"resources/views/new.html\\"))" "(insert-jss \\n  ddd\\n  [\\"js/bootstrap.min.js\\" \\"js/jquery.js\\" \\"js/custom.js\\"])" "(read-html \\"resources/views/new.html\\")" "(input-form)" "(parse-html \\"resources/views/new.html\\")" "(def ddd (parse-html \\"resources/views/new.html\\"))" "(first ddd)" "(second ddd)" "(nth ddd 2)" "(first (read-html \\"resources/views/new.html\\"))" "(parse-html \\"resources/views/new.html\\")" "(insert-jss \\n  ddd\\n  [\\"js/bootstrap.min.js\\" \\"js/jquery.js\\" \\"js/custom.js\\"])" "(parse-html \\"resources/views/new.html\\")" "(def dda (parse-html \\"resources/views/new.html\\"))" "(first dda)" "(second dda)" "(nth dda 2)" "(insert-jss \\n  dda\\n  [\\"js/bootstrap.min.js\\" \\"js/jquery.js\\" \\"js/custom.js\\"])" "(conj (nth  dda) (vec (conj (map (fn  [param]\\r\\n         (apply vec (page/include-js param))) scripts) \:div)))]" "(conj (nth  dda) (vec (conj (map (fn  [param]\\r\\n         (apply vec (page/include-js param))) scripts) \:div)))" "(conj (nth  dda) (vec (conj (map (fn  [param]\\r\\n         (apply vec (page/include-js param))) \\"dd.js\\") \:div)))" "(conj (nth  dda 2) (vec (conj (map (fn  [param]\\r\\n         (apply vec (page/include-js param))) \\"dd.js\\") \:div)))" "(nth dda 2)" "(map (fn  [param]\\n       (apply vec (page/include-js param))) [\\"dd.js\\" \\"ww.js\\"])" "(conj (map (fn  [param]\\r\\n                                                          (apply vec (page/include-js param))) [\\"dd.js\\" \\"ww.js\\"]) \:div)" "(vec (conj (map (fn  [param]\\r\\n                                                          (apply vec (page/include-js param))) [\\"dd.js\\" \\"ww.js\\"]) \:div))" "(conj (nth  file-html 2) (vec (conj (map (fn  [param]\\r\\n                                                          (apply vec (page/include-js param))) [\\"dd.js\\" \\"ww.js\\"]) \:div)))" "(conj (nth  dda 2) (vec (conj (map (fn  [param]\\r\\n                                                          (apply vec (page/include-js param))) [\\"dd.js\\" \\"ww.js\\"]) \:div)))" "(insert-jss dda [\\"dd.js\\" \\"ww.js\\"])" "(input-form)" "(get-companies params)" "(perform_nmf params)" "(download_data params)" "(perform_nmf params)" "(makemap params)" "(perform_nmf params)" "(perform_nmf2\\n  params)" "(par/make_nmf (vec (get-companies params)) \:Close)" "(vec (get-companies params))" "(par/make_nmf (vec (get-companies params)) \:Close)" "(vec (get-companies params))" "(par/make_nmf (vec (get-companies params)) \:Close)" "(+ 8 7)" "companies" "(make_nmf companies \:Close)" "(read_multiple_data companies)" "companies" "(read_multiple_data companies)" "(read_multiple_data [\\"AAPL\\" \\"BP\\" \\"XOM\\"])" "(read_multiple_data [\\"AAPL\\"])" "(read_multiple_data [\\"AAPL\\" \\"BP\\" \\"XOM\\"])" "(read_multiple_data [\\"AAPL\\"])" "(read_multiple_data [\\"AAPL\\" \\"BP\\"])" "\:data" "(read_multiple_data [\\"AAPL\\" \\"BP\\"])" "(read_multiple_data [\\"AAPL\\" \\"BP\\" \\"XOM\\"])" "(read_multiple_data [\\"AAPL\\" \\"BP\\"])" "(read_multiple_data [\\"AAPL\\" \\"BP\\" \\"XOM\\"])" "(read_multiple_data [\\"AAPL\\" \\"XOM\\"])" "(read_multiple_data [\\"AAPL\\"])" "(read_multiple_data [\\"AAPL\\" \\"XOM\\"])" "(read_multiple_data\\n  [\\"BP \\"\\"AAPL\\" \\"XOM\\"])" "(read_multiple_data\\n  [\\"BP\\" \\"AAPL\\" \\"XOM\\"])" "(loop [dat []\\n       comp [\\"DD\\" \\"CC\\" \\"SS\\" \\"WW\\"]]\\n  (if(empty? (rest comp))\\n    (cons (str (first comp) \\"c\\") dat)\\n    (recur (cons (str (first comp))) (rest comp))))" "(loop [dat []\\n       comp [\\"DD\\" \\"CC\\" \\"SS\\" \\"WW\\"]]\\n  (if(empty? (rest comp))\\n    (cons (str (first comp) \\"c\\") dat)\\n    (recur (cons (str (first comp) dat)) (rest comp))))" "(loop [dat []\\n       comp [\\"DD\\" \\"CC\\" \\"SS\\" \\"WW\\"]]\\n  (if(empty? (rest comp))\\n    (cons (str (first comp) \\"c\\") dat)\\n    (recur \\"\\" (rest comp))))" "(loop [dat []\\n       comp [\\"DD\\" \\"CC\\" \\"SS\\" \\"WW\\"]]\\n  (if(empty? (rest comp))\\n    (cons (str (first comp) \\"c\\") dat)\\n    (recur (cons (str (first comp) \\"c\\") dat) (rest comp))))" "(read_multiple_data [\\"AAPL\\" \\"XOM\\"])" "(read_multiple_data [\\"AAPL\\" \\"XOM\\" \\"BP\\"])" "(read_multiple_data [\\"AAPL\\" \\"XOM\\" \\"BP\\" \\"EXPE\\"])" "(extract_all2 (read_multiple_data [\\"AAPL\\" \\"XOM\\" \\"BP\\"])\:Close\\n              )" "(get_vals2 (extract_all2 (read_multiple_data [\\"AAPL\\" \\"XOM\\" \\"BP\\"])\:Close\\n                      ))" "(make_matrix_data(get_vals2 (extract_all2 (read_multiple_data [\\"AAPL\\" \\"XOM\\" \\"BP\\"])\:Close\\n                             )))" "(prn \\"D\\")" "(perform_nmf params)" "(def nmfed *1)" "(def result (get nmfed \:result))" "(first result)" "(def H (first result))" "(first H)" "(nth H 2)" "(mapcat vec (get nmfed \:companies) (nth H 1))" "(map vec (get nmfed \:companies) (nth H 1))" "(interleave (get nmfed \:companies) (nth H 1))" "(defn ff [d x]\\n  [d x])" "(map ff (get nmfed \:companies) (nth H 1))" "(def prb *1)" "prb" "(sort-by second prb)" "(sortH nmfed)" "(sortH nmfed 1)" "(sortH nmfed \\"1\\")" "(sortH nmfed 3)" "(sortH nmfed 2)" "(sortH nmfed 2.0)" "(nth (first (get nmfed \:result)) e 1)" "(nth (first (get nmfed \:result)) 1)" "(interleave (get nmf_result \:companies)\\r\\n                                                          (nth (first (get nmf_result \:result)) (- feature 1)))" "(interleave (get nmfed \:companies)\\r\\n                                                          (nth (first (get nmf_result \:result)) (- feature 1)))" "(interleave (get nmfed \:companies)\\n            (nth (first (get nmfed \:result)) (- feature 1)))" "(interleave (get nmfed \:companies)\\n            (nth (first (get nmfed \:result)) 1))" "(map (fn [a b] [a b]) (interleave (get nmfed \:companies)\\n             (nth (first (get nmfed \:result)) 1)))" "(map (fn [a b] (vec a b)) (interleave (get nmfed \:companies)\\n             (nth (first (get nmfed \:result)) 1)))" "(map (fn [a b] [a b])  (interleave (get nmfed \:companies)\\r\\n                                                              (nth (first (get nmfed \:result))  1)))" "(map ff  (interleave (get nmfed \:companies)\\r\\n                                                              (nth (first (get nmfed \:result))  1)))" "(map ff   (get nmfed \:companies)\\n     (nth (first (get nmfed \:result))  1))" "(sortH nmfed 1)" "(finance/perform-nmf finance/params)" "(+ 6 6)" "(+ 3 3)" "(+ 5 5)" "(finance/perform_nmf finance/params)" "(def res *1)" "(def sortedH (finance/sortH res 1))" "sortedH" "(html [\:script\\n       sortedH\\n       ])" "(html [\:script\\n       {var c \= (first (first sortedH))}\\n       ])" "(html [\:script\\n       (str \\"var c \= \\" (first (first sortedH))\\n            ]\\n       )" "(html [\:script\\n       (str \\"var c \= \\" (first (first sortedH))\\n        \\n       )" "(html [\:script\\n       (str \\"var c \= \\" (first (first sortedH)))\\n       ]\\n        \\n      )" "(loop [cs []\\n       vls []\\n       ss sortedH]\\n  (if(empty? (rest sortedH))\\n    (do (cons (first (first sortedH)) cs)\\n      (cons (second (first sortedH)) vls)\\n      [cs vls]\\n      )\\n    (recur (cons (first (first sortedH)) cs) (cons (second (first sortedH)) vls) (rest sortedH))\\n    )\\n  \\n  \\n  )" "(defn ll\\n  [sorted]\\n  (loop [cs []\\r\\n       vls []\\r\\n       ss sortedH]\\r\\n  (if(empty? (rest sortedH))\\r\\n    (do (cons (first (first sortedH)) cs)\\r\\n      (cons (second (first sortedH)) vls)\\r\\n      [cs vls]\\r\\n      )\\r\\n    (recur (cons (first (first sortedH)) cs) (cons (second (first sortedH)) vls) (rest sortedH))\\r\\n    )))" "(ll sortedH)" "(defn ll\\n  [sorted]\\n  (loop [cs []\\r\\n       ss sortedH]\\r\\n  (if(empty? (rest sortedH))\\r\\n(cons (first (first sortedH)) cs)\\r\\n    (recur (cons (first (first sortedH)) cs) (rest sortedH))\\r\\n    )))" "(ll sortedH)" "(defn ll\\n  [sorted]\\n  (loop [cs []\\r\\n       ss sorted]\\r\\n  (if(empty? (rest sorted))\\r\\n(cons (first (first sorted)) cs)\\r\\n    (recur (cons (first (first sorted)) cs) (rest sorted))\\r\\n    )))" "(ll sortedH)" "sortedH" "(first sortedH)" "(ggg sortedH)" "(html [\:script\\n       (str \\"var c \= \\" (ggg sortedH))\\n       ]\\n        \\n      )" "(html [\:script\\n       (str \\"var c \= \\" (apply str (ggg sortedH)))\\n       ]\\n        \\n      )" "(html [\:script\\n       (str \\"var c \= \\" (ggg sortedH))\\n       ]\\n        \\n      )" "(html [\:script\\n       (str \\"var c \= \\" (get_attr sortedH))\\n       ]\\n        \\n      )" "(html [\:script\\n       (str \\"var c \= \\" (get_attr sortedH 1))\\n       ]\\n        \\n      )" "(html [\:script\\n       (str \\"var c \= \\" (get_attr sortedH 2))\\n       ]\\n        \\n      )" "(html [\:script\\n       (str \\"var c \= \\" (get_attr sortedH 1))\\n       ]\\n        \\n      )" "(html [\:script\\n       (str \\"var c \= \\" (get_attr sortedH 2))\\n       ]\\n        \\n      )" "(+ 3 3)" "(views/nmf)" "(finance/makemap \\"3\\" \\"ff\\")" "(finance/makemap [\\"3\\" \\"ff\\"])" "(finance/predicate [\\"3\\" \\"ff\\"])" "(prn \\"d\\")" "(finance/predicate \\"D\\")" "(finance/perform_nmf finance/params)" "(finance/download_data {\:features \\"2\\" \:XOM \\"XOM\\" \:BP \\"BP\\" \:EXPE \\"EXPE\\"  \:endDay \\"12\\", \:interval \\"w\\", \:AAPL \\"AAPL\\", \:startDay \\"20\\", \:startMonth \\"10\\", \:startYear \\"2010\\", \:endMonth \\"9\\", \:endYear \\"2013\\"})" "(representation.models.finance/download_data {\:features \\"2\\" \:XOM \\"XOM\\" \:BP \\"BP\\" \:EXPE \\"EXPE\\"  \:endDay \\"12\\", \:interval \\"w\\", \:AAPL \\"AAPL\\", \:startDay \\"20\\", \:startMonth \\"10\\", \:startYear \\n                                              \\"2010\\", \:endMonth \\"9\\", \:endYear \\"2013\\"})" "(representation.models.finance/download_data\\n  {\:endDay \\"1\\", \:WU \\"WU\\", \:interval \\"d\\", \:startDay \\"1\\", \:features \\"\\", \:startMonth \\"1\\", \:startYear \\"2011\\", \:endMonth \\"1\\", \:AAPL \\"AAPL\\", \:endYear \\"2012\\"})" "(representation.models.finance/download_data\\n  {\:endDay \\"1\\", \:WU \\"WU\\", \:interval \\"d\\", \:XOM \\"XOM\\", \:startDay \\"1\\", \:features \\"\\", \:startMonth \\"1\\", \:startYear \\"2011\\", \:endMonth \\"1\\", \:EXPE \\"EXPE\\", \:endYear \\"2012\\"})" "(representation.models.finance/perform_nmf\\n  {\:endDay \\"1\\", \:WU \\"WU\\", \:interval \\"d\\", \:XOM \\"XOM\\", \:startDay \\"1\\", \:features \\"\\", \:startMonth \\"1\\", \:startYear \\"2011\\", \:endMonth \\"1\\", \:EXPE \\"EXPE\\", \:endYear \\"2012\\"})" "e" "(e)" "*e" "(representation.models.finance/perform_nmf\\n  {\:endDay \\"1\\", \:WU \\"WU\\", \:interval \\"d\\", \:XOM \\"XOM\\", \:startDay \\"1\\", \:features \\"\\", \:startMonth \\"1\\", \:startYear \\"2011\\", \:endMonth \\"1\\", \:EXPE \\"EXPE\\", \:endYear \\"2012\\"})" "*e" "(representation.models.finance/perform_nmf\\n  {\:endDay \\"1\\", \:WU \\"WU\\", \:interval \\"d\\", \:XOM \\"XOM\\", \:startDay \\"1\\", \:features \\"\\", \:startMonth \\"1\\", \:startYear \\"2011\\", \:endMonth \\"1\\", \:EXPE \\"EXPE\\", \:endYear \\"2012\\"})" "(read-string (get  {\:endDay \\"1\\", \:WU \\"WU\\", \:interval \\"d\\", \:XOM \\"XOM\\", \:startDay \\"1\\", \:features \\"\\", \:startMonth \\"1\\", \:startYear \\"2011\\", \:endMonth \\"1\\", \:EXPE \\"EXPE\\", \:endYear \\"2012\\"} \:features))" "(representation.models.finance/perform_nmf\\n  {\:endDay \\"1\\", \:WU \\"WU\\", \:interval \\"d\\", \:XOM \\"XOM\\", \:startDay \\"1\\", \:features \\"2\\", \:startMonth \\"1\\", \:startYear \\"2011\\", \:endMonth \\"1\\", \:EXPE \\"EXPE\\", \:endYear \\"2012\\"})" "(+ 3 3)" "(+ 5 5)" "(+ 4 6)" "(try-times* 4 (+ 3 3))" "(+ 4 4)" "base.file_fetch/try-times*" "(+ 4 4)" "(download_file {\:features \\"2\\" \:XOM \\"XOM\\" \:BP \\"BP\\" \:EXPE \\"EXPE\\"  \:endDay \\"12\\", \:interval \\"w\\", \:AAPL \\"AAPL\\", \:startDay \\"20\\", \:startMonth \\"10\\", \:startYear \\"2010\\", \:endMonth \\"9\\", \:endYear \\"2013\\"})" "(download_data {\:features \\"2\\" \:XOM \\"XOM\\" \:BP \\"BP\\" \:EXPE \\"EXPE\\"  \:endDay \\"12\\", \:interval \\"w\\", \:AAPL \\"AAPL\\", \:startDay \\"20\\", \:startMonth \\"10\\", \:startYear \\"2010\\", \:endMonth \\"9\\", \:endYear \\"2013\\"})" "(try-times* 10 (download_data {\:features \\"2\\" \:XOM \\"XOM\\" \:BP \\"BP\\" \:EXPE \\"EXPE\\"  \:endDay \\"12\\", \:interval \\"w\\", \:AAPL \\"AAPL\\", \:startDay \\"20\\", \:startMonth \\"10\\", \:startYear \\"2010\\", \:endMonth \\"9\\", \:endYear \\"2013\\"}))" "(try-times 10 (download_data {\:features \\"2\\" \:XOM \\"XOM\\" \:BP \\"BP\\" \:EXPE \\"EXPE\\"  \:endDay \\"12\\", \:interval \\"w\\", \:AAPL \\"AAPL\\", \:startDay \\"20\\", \:startMonth \\"10\\", \:startYear \\"2010\\", \:endMonth \\"9\\", \:endYear \\"2013\\"}))" "(download_data {\:features \\"2\\" \:XOM \\"XOM\\" \:BP \\"BP\\" \:EXPE \\"EXPE\\"  \:endDay \\"12\\", \:interval \\"w\\", \:AAPL \\"AAPL\\", \:startDay \\"20\\", \:startMonth \\"10\\", \:startYear \\"2010\\", \:endMonth \\"9\\", \:endYear \\"2013\\"})" "(try-times 10 (download_data {\:features \\"2\\" \:XOM \\"XOM\\" \:BP \\"BP\\" \:EXPE \\"EXPE\\"  \:endDay \\"12\\", \:interval \\"w\\", \:AAPL \\"AAPL\\", \:startDay \\"20\\", \:startMonth \\"10\\", \:startYear \\"2010\\", \:endMonth \\"9\\", \:endYear \\"2013\\"}))" "(representation.models.finance/download_data\\n  {\:endDay \\\\\\"1\\\\\\", \:WU \\\\\\"WU\\\\\\", \:interval \\\\\\"d\\\\\\", \:XOM \\\\\\"XOM\\\\\\", \:startDay \\\\\\"1\\\\\\", \:features \\\\\\"\\\\\\", \:startMonth \\\\\\"1\\\\\\", \:startYear \\\\\\"2010\\\\\\", \:endMonth \\\\\\"1\\\\\\", \:EXPE \\\\\\"EXPE\\\\\\", \:endYear \\\\\\"2011\\\\\\"})" "(def par {\:endDay \\\\\\"1\\\\\\", \:WU \\\\\\"WU\\\\\\", \:interval \\\\\\"d\\\\\\", \:XOM \\\\\\"XOM\\\\\\", \:startDay \\\\\\"1\\\\\\", \:features \\\\\\"\\\\\\", \:startMonth \\\\\\"1\\\\\\", \:startYear \\\\\\"2010\\\\\\", \:endMonth \\\\\\"1\\\\\\", \:EXPE \\\\\\"EXPE\\\\\\", \:endYear \\\\\\"2011\\\\\\"})" "(read-string \\\\\\"d\\\\\\")" "(\\"dd\\" \\"c\\")" "'\\n (\\"dd\\" \\"c\\")" "(vec '(\\"dd\\" \\"c\\"))" "(base.file_fetch/fetch_data [\\"XOM\\" \\"EXPE\\"])" "representation.models.finance/download_data" "(representation.models.finance/download_data\\n  {\:features \\"2\\" \:XOM \\"XOM\\" \:BP \\"BP\\" \:EXPE \\"EXPE\\"  \:endDay \\"12\\", \:interval \\"w\\", \:AAPL \\"AAPL\\", \:startDay \\"20\\", \:startMonth \\"10\\", \:startYear \\"2010\\", \:endMonth \\"9\\", \:endYear \\"2013\\"})" "(base.file_fetch/fetch_data [\\"XOM\\" \\"EXPE\\"] 1 1 2003 1 1 2005 \\"d\\")" "(base.file_fetch/fetch_data \\n  [\\"XOM\\" \\"EXPE\\"] 10 10 2003 10 10 2005 \\"d\\")" "(def res (representation.models.finance/perform_nmf\\n           {\:endDay \\"8\\", \:WU \\"WU\\", \:interval \\"d\\", \:XOM \\"XOM\\", \:startDay \\"11\\", \:features \\"2\\", \:startMonth \\"8\\", \:startYear \\"2011\\", \:endMonth \\"5\\", \:EXPE \\"EXPE\\", \:endYear \\"2012\\"})\\n  )" "res" "(get res \:companies)" "res" "(representation.models.finance/sortH res 1)" "(representation.models.finance/sortH res 2\\n                                     )" "(representation.models.finance/sortW res 2\\n                                     )" "(take 10 (representation.models.finance/sortW res 2\\n                                              ))" "(map first (take 10 (representation.models.finance/sortW res 2\\n                                                         )))" "(loop [index (count res)\\r\\n            divs []]\\r\\n       (cond (\= index 1)\\r\\n             (cons (finance/sortH res index ) divs)\\r\\n             \:else\\r\\n             (recur (- index 1) (cons (finance/sortH res index) divs))))" "res" "(count (second (get res \:result)))" "(count (first (get res \:result)))" "(loop [index 3\\n       seq []]\\n  (cond (\= index 0)\\n        (cons index seq)\\n        \:else\\n        (recur (-index 1) seq)))" "(loop [index 3\\n       seq []]\\n  (cond (\= index 0)\\n        (cons index seq)\\n        \:else\\n        (recur (- index 1) seq)))" "(loop [index 3\\n       seq []]\\n  (cond (\= index 0)\\n        (cons index seq)\\n        \:else\\n        (recur (- index 1) (cons index seq))))" "(loop [index (count (first (get res \:result)))\\n       seq []]\\n  (cond (\= index 0)\\n        (cons index seq)\\n        \:else\\n        (recur (- index 1) (cons index seq))))" "(loop [index (count (first (get res \:result)))\\n       seq []]\\n  (cond (\= index 1)\\n        (cons index seq)\\n        \:else\\n        (recur (- index 1) (cons index seq))))" "(loop [index (count (first (get res \:result)))\\n       seq []]\\n  (cond (\= index 0)\\n        (cons index seq)\\n        \:else\\n        (recur (- index 1) (cons index seq))))" "(loop [index (count (first (get res \:result)))\\n       seq []]\\n  (cond (\= index 1)\\n        (cons index seq)\\n        \:else\\n        (recur (- index 1) (cons index seq))))" "(defn getSS\\n  [resul num]\\n  (let [sorH (representation.models.finance/sortH resul num)\\n        sorW (representation.models.finance/sortW resul num)]\\n    (cons\\n      (map first sorH)\\n      (map second sorH)\\n      (map first sorW)\\n      (map second sorW)))" "(defn getSS\\n  [resul num]\\n  (let [sorH (representation.models.finance/sortH resul num)\\n        sorW (representation.models.finance/sortW resul num)]\\n    (cons\\n      (map first sorH)\\n      (map second sorH)\\n      (map first sorW)\\n      (map second sorW))))" "(getSS res 1)" "(defn getSS\\n  [resul num]\\n  (let [sorH (representation.models.finance/sortH resul num)\\n        sorW (representation.models.finance/sortW resul num)]\\n    [\\n      (map first sorH)\\n      (map second sorH)\\n      (map first sorW)\\n      (map second sorW)])))" "(defn getSS\\n  [resul num]\\n  (let [sorH (representation.models.finance/sortH resul num)\\n        sorW (representation.models.finance/sortW resul num)]\\n    [\\n      (map first sorH)\\n      (map second sorH)\\n      (map first sorW)\\n      (map second sorW)]))" "(getSS res 1)" "(loop [index (count (first (get res \:result)))\\r\\n       seq []]\\r\\n  (cond (\= index 1)\\r\\n        (cons (representation.models.finance/get-feature-data res index))\\r\\n        \:else\\r\\n        (recur (- index 1) (cons (representation.models.finance/get-feature-data res index)))))" "(loop [index (count (first (get res \:result)))\\r\\n       seq []]\\r\\n  (cond (\= index 1)\\r\\n        (cons (representation.models.finance/get-feature-data res index) seq)\\r\\n        \:else\\r\\n        (recur (- index 1) (cons (representation.models.finance/get-feature-data res index) seq))))" "(representation.models.finance/get-all-feature-data res)" "(first (representation.models.finance/get-all-feature-data res))" "(representation.models.finance/get-all-feature-data\\n  res)" "*1" "(first (representation.models.finance/get-all-feature-data res))" "(first(first (representation.models.finance/get-all-feature-data res)))" "(def aa(first(first (representation.models.finance/get-all-feature-data res))))" "(clojure.string/join \\",\\" \\n                     (map \#(str \\\\\\" % \\\\\\") aa))" "(vec (clojure.string/join \\",\\" \\n                          (map \#(str \\\\\\" % \\\\\\") aa)))" "(read-string (clojure.string/join \\",\\" \\n                              (map \#(str \\\\\\" % \\\\\\") aa)))" "(apply str (clojure.string/join \\",\\" \\n                            (map \#(str \\\\\\" % \\\\\\") aa)))" "(apply str (clojure.string/join \\",\\" \\n                            (map \#(str \\" % \\") aa)))" "(interpose \\",\\" aa)" "(array-map aa)" "(defn jsArr\\r\\n  \\"Recursively converts a sequential object into a JavaScript array\\"\\r\\n  [seq]\\r\\n  (.array (vec (map \#(if (sequential? %) (jsArr %) %)\\r\\n                    seq))))" "(jsArr aa)" "(concat (interpose \\",\\" aa))" "(for [p in (interpose \\",\\" aa)]\\n  (str p))" "(for [p (interpose \\",\\" aa)]\\n  (str p))" "(join (interpose \\",\\" aa))" "(clojure.string/join (interpose \\",\\" aa))" "(clojure.string/join \\n  (interpose \\",\\" [33 8]))" "(representation.views.views/read-html \\n  \\"resources/views/vis.html\\")" "(representation.views.views/parse-html \\n  \\"resources/views/vis.html\\")" "(parse-vis \\"resources/views/vis.html\\")" "(representation.views.views/parse-vis\\n  \\"resources/views/vis.html\\")" "(html(representation.views.views/parse-vis\\n       \\"resources/views/vis.html\\"))" "(html(representation.views.views/parse-html\\n       \\"resources/views/new.html\\"))" "(representation.views.views/makeScript 3)" "(def res (representation.models.finance/perform_nmf\\n           {\:endDay \\"8\\", \:WU \\"WU\\", \:interval \\"d\\", \:XOM \\"XOM\\", \:startDay \\"11\\", \:features \\"2\\", \:startMonth \\"8\\", \:startYear \\"2011\\", \:endMonth \\"5\\", \:EXPE \\"EXPE\\", \:endYear \\"2012\\"})\\n  )" "res" "(representation.models.finance/get-all-feature-data\\n  res)" "(def result *1)" "(first result)" "(first(first result))" "(def F1 (first result))" "F1" "(first F1)" "(second F1)" "(nth F1 2)" "(nth F1 3)" "(.indexOf [2 4 6 7] 6 )" "(makeScript res)" "(def teststr \\"\\\\\\"dd\\\\\\"\\"\\n  )" "teststr" "(clojure.string/replace teststr \#\\"\\\\\\\\\\" \\"\\")" "(apply \\n  str \\n  (filter \#(\#{\\\\\\\\} %) teststr))" "(clojure.string/replace teststr \#\\"\\\\\\\\\\" \\"-\\")" "(clojure.string/replace teststr \#\\"\\\\\\" \\"-\\")" "(clojure.string/replace teststr \#\\"\\\\\\\\\\" \\"-\\")" "(clojure.string/replace teststr \#\\"\\\\\\\\\\\\\\\\\\" \\"-\\")" "(clojure.string/replace teststr \#\\"\\\\\\\\\\\\\\\\\\\\\\" \\"-\\")" "(clojure.string/replace teststr \#\\"\\\\\\\\\\\\\\\\\\\\\\"\\", \\"\\\\\\"\\")" "(clojure.string/replace teststr \#\\"\\\\\\\\\\\\\\\\\\\\\\"\\", \\"\\")" "(clojure.string/replace \\n  teststr \#\\"\\\\\\\\\\\\\\\\\\\\\\"\\", \\"d\\")" "(clojure.string/replace \\n  teststr \#\\"\\\\\\\\\\\\\\\\\\", \\"d\\")" "(makeScript res)" "(apply str (makeScript res))" "res" "(read-html \\"resources/views/new.html\\")" "(parse-vis \\"resources/views/vis.html\\")" "(+ 5 5)" "(+ 3 3)" "(base.file_fetch/make_uri \\n  \\"COMP\\" 5 10 2010 7 7 2012 \\"w\\")"]
eclipse.preferences.version=1
